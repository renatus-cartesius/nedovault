// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NedoVault_AddSecret_FullMethodName       = "/api.NedoVault/AddSecret"
	NedoVault_ListSecretsMeta_FullMethodName = "/api.NedoVault/ListSecretsMeta"
	NedoVault_GetSecret_FullMethodName       = "/api.NedoVault/GetSecret"
)

// NedoVaultClient is the client API for NedoVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NedoVaultClient interface {
	AddSecret(ctx context.Context, in *AddSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSecretsMeta(ctx context.Context, in *ListSecretsMetaRequest, opts ...grpc.CallOption) (*ListSecretsMetaResponse, error)
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
}

type nedoVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewNedoVaultClient(cc grpc.ClientConnInterface) NedoVaultClient {
	return &nedoVaultClient{cc}
}

func (c *nedoVaultClient) AddSecret(ctx context.Context, in *AddSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NedoVault_AddSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nedoVaultClient) ListSecretsMeta(ctx context.Context, in *ListSecretsMetaRequest, opts ...grpc.CallOption) (*ListSecretsMetaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecretsMetaResponse)
	err := c.cc.Invoke(ctx, NedoVault_ListSecretsMeta_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nedoVaultClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, NedoVault_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NedoVaultServer is the server API for NedoVault service.
// All implementations must embed UnimplementedNedoVaultServer
// for forward compatibility.
type NedoVaultServer interface {
	AddSecret(context.Context, *AddSecretRequest) (*emptypb.Empty, error)
	ListSecretsMeta(context.Context, *ListSecretsMetaRequest) (*ListSecretsMetaResponse, error)
	GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
	mustEmbedUnimplementedNedoVaultServer()
}

// UnimplementedNedoVaultServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNedoVaultServer struct{}

func (UnimplementedNedoVaultServer) AddSecret(context.Context, *AddSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecret not implemented")
}
func (UnimplementedNedoVaultServer) ListSecretsMeta(context.Context, *ListSecretsMetaRequest) (*ListSecretsMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecretsMeta not implemented")
}
func (UnimplementedNedoVaultServer) GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedNedoVaultServer) mustEmbedUnimplementedNedoVaultServer() {}
func (UnimplementedNedoVaultServer) testEmbeddedByValue()                   {}

// UnsafeNedoVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NedoVaultServer will
// result in compilation errors.
type UnsafeNedoVaultServer interface {
	mustEmbedUnimplementedNedoVaultServer()
}

func RegisterNedoVaultServer(s grpc.ServiceRegistrar, srv NedoVaultServer) {
	// If the following call pancis, it indicates UnimplementedNedoVaultServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NedoVault_ServiceDesc, srv)
}

func _NedoVault_AddSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NedoVaultServer).AddSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NedoVault_AddSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NedoVaultServer).AddSecret(ctx, req.(*AddSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NedoVault_ListSecretsMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NedoVaultServer).ListSecretsMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NedoVault_ListSecretsMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NedoVaultServer).ListSecretsMeta(ctx, req.(*ListSecretsMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NedoVault_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NedoVaultServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NedoVault_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NedoVaultServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NedoVault_ServiceDesc is the grpc.ServiceDesc for NedoVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NedoVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NedoVault",
	HandlerType: (*NedoVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSecret",
			Handler:    _NedoVault_AddSecret_Handler,
		},
		{
			MethodName: "ListSecretsMeta",
			Handler:    _NedoVault_ListSecretsMeta_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _NedoVault_GetSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
